## ForkJoinPool 사용시 정말 CPU 코어 갯수만큼 작업을 분할 할수 있을까?

- ForkJoinPool은 병렬처리를 위한 Java의 프레임워크로, 여러작업을 동시에 수행할 수 있지만, 실제로 처리되는 작업의 수는 CPU 코어의 개수와 비례하지 않을 수 있다.



1. CPU 코어와 병렬성 : 

   - ForkJoinPool은 시스템의 가용한 CPU 코어 수에 맞춰 기본적으로 병렬 스레드 풀을 생성한다.

   - 예를 들어, 4개의 CPU 코어가 있는 경우, 기본적으로 4개의 스레드가 생성된다.

2. 작업 분할 (Work Stealing) : 

   - ForkJoinPool의 주요 특징은 작업을 작은 단위로 분할한 후, 각 스레드가 남은 작업을 가져와 실행하는 "Work Stealing" 알고리즘을 사용한다. 

   - 하나의 스레드가 자신의 작업을 마치면 다른 스레드의 남은 작업을 가져와 실행할 수 있다.
   - 따라서 코어 개수보다 더 많은 작업을 동시에 처리하려고 할 수 있다.

3. 동작 방식 : 

   - 작업이 재귀적으로 나뉘어 각 스레드에게 할당되며, 이를 Fork와 Join 연산으로 처리한다.
   - 기본적으로 ForkJoinPool의 스레드 수는 CPU 코어 수에 의해 결정되지만, 각 스레드가 작업을 종료 할 때까지 여러작업을 처리할 수 있다.

4. 스레드 풀 크기 조정 :

   -  기본적으로 ForkJoinPool은 CPU 코어 개수를 기반으로 하지만, 개발자가 직접 스레드 풀의 크기를 설정할 수 있다. 

   - ForkJoinPool(int parallelism) 생성자를 사용해 원하는 병렬성을 지정할 수 있다.

5. 스레드 오버헤드 : 

   - CPU 코어 수보다 많은 스레드를 사용한다고 항상 성능이 향상되지는 않는다.
   - 오히려 스레드 간 컨텍스트 스위칭과 같은 오버헤드로 인해 성능이 저하될 수 있다.



