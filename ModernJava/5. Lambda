1. 람다가 뭔데요? 

지난 챕터에서는 동작 파라미터화를 통해서 파라미터로 메서드의 동작 자체를 전달해주는 것을 배웠다. 
이때, 메서드의 동작을 전달하기 위해서 별도의 @Override 어노테이션이나 상속된 메서드 이름 등, 동작 외에 다른 코드들이 반복되어 상당히 불편했다.
람다 표현식은 이를 해결하기 위해서, 단순히 '필요한 동작에 대한 행위만' 메서드로 전달할 수 있도록 익명 함수를 단순화한 것이다. 

람다 표현식은 다음고 같은 특징을 가진다.

1. 메서드에 이름이 없으니까 "익명"이다. (메서드에 대한 네이밍을 고만할 필요가 없다)
-> 이름은 없지만, 파라미터 리스트와 바디, 반환 형식, 발생 가능한 예외 리스트는 가질 수 있다.
2. 함수 : 특정 클래스에 종속되지 않고, 독립적으로 구성된다. 하지만 메서드처럼 파라미터, 바디, 리턴 값, 가능한 에외까지 모두 포함한다!
3. 전달 : 람다 표현식은 마치 '일급 객체 처럼' 인수로 전달하거나, 변수로 저장이 가능하다.
4. 간결성 : 코드가 간결해진다! 단순히 동작 자체만 넘겨줄 수 있다.

람다 표현식은 어떻게 구성되어 있을까?

(Crew a1, Crew a2) -> Integer.compare(a1.getAge() a2.getAge());

(Crew a1, Crew a2) : 람다 파라미터, 현재 코드에서는 compare에 사용되는 파라미터 2개를 의미한다.
-> : 화살표는 파라미터 리스트와 바디를 구분해주는 역할을 한다.
Integer.compare(a1.getAge(), a2.getAge()) : 람다 바디, 람다의 반환값을 표현해준다.

또한, 람다는 크게 표현식 스타일과 블록 스타일로 표현할 수 있다.
표현식 스타일 :  () -> "Hello World!"
블록 스타일 : () -> {return "Hello Crew!";}

블록에서는 return과 세미콜론을 붙여줘야 한다. 주로 여러 행을 입력해야 할 때 사용하며, 
로직이 간결한 경우 표현식 스타일로도 만들 수 있다.




// 원본블로그 : https://cl8d.tistory.com/m/36  