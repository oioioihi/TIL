1. 동작 파라미터화

우리는 어떻게하면 변화하는 요구사항 속에서 유동적으로 대응할 수 있을까?
가장 먼저, 그냥 요구사항에 맞도록 가능한 모든 속성에 대해서 전부 시도하는 방법이 있다.

1) 백엔트 팀이면서 여자 크루 모으기
2) 프론트엔드 팀이면서 30살 이상인 크루 모으기
3) ios 이면서 남자 크루 모으기 ..등등

이렇게 계속 케이스가 추가 된다면, 건건 마다 로직을 짜고 테스트케이스도 추가해야하는 번거로움이 발생한다.

그리하여 
=> 비슷한 코드가 반복해서 존재한다면, 해당 코드를 추상화 하자.

현재의 요구사항을 생각해보자. 

1) 백엔트 팀이면서 여자 크루 모으기 => 백엔드 아니면 땡! , 여자 아니면 땡!
2) 프론트엔드 팀이면서 30살 이상인 크루 모으기 => 프론트엔드 아니면 땡!, 30살 이하면 땡!

우리는 위 문장을 보고 무언가 중복되는 걸 찾을 수 있다. '~라면 통과, ~가 아니라면 땡!'
즉, 두 조건 모두 참과 거짓에 대해 반환을 하고 있다는 것을 알 수 있다. 바로 boolean이다.
그리고, 자바에는 참/거짓에 대응하기 위해, 꽤나 멋진 함수형 인터페이스를 제공하고 있다.

@FunctionalInterface
public interface Predicate<T>{
    boolean test(T t);
}