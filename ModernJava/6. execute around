1. Execute Around

자바 7에서부터 추가된 Try-With-Resources를 활용하면 try에 자원 객체를 전달하고, try 코드 블록이 끝나면
자동으로 자원을 종료해줄 수 있다. 즉, 모든 catch 블록에 별도의 종료처리를 하거나, finally 블록을 선언하지 않아도 된다.
이전까지는 항상 자원을 생성하고, 사용하고, 해제할 때에는 아래와 같이 중복되는 코드가 필요했었다.

Resource resource = null;

try{
    resource = getResource();
    // 리소스 사용 로직
}
catch(){
    // 예외 처리 로직
}
finally{
    if(resource != null){
        try {
            resource.close(); // 자원 할당 해제 -> CG대상
        }
        catch(Exception ignored){

        }
    }
}

자원 해제를 위해서, 다음과 같이 중복되는 try-catch문이 필요했던 것이다. 그러나, 자바 7에서는
try-with-resources라는 특징이 추가되어, try에 자원을 전달하게 되면 finally에서 종료 처리를 하지 않아도
자동으로 자원을 해제해준다.

try(Order order){
    // 리소스 사용
}
catch(){

}

위와 같이 코드가 훨씬 간결해지는 것을 볼 수 있다.

우리는 위와 같은 과정을 이제 '실행 어라운드 패턴'이라고 말할 것이다. 그리고, 이러한 실행 어라운드 패턴을 
구현하기 위해서 람다와 동작 파라미터를 사용할 것이다. 즉, 실제 자원을 처리하는 로직을 '설정 + 정리 과정'으로 감싸는 것을 의미한다.

-> 실행 어라운드 패턴 = 초기화/준비 + 작업 처리 로직 + 정리/마무리

실제로 어떤 식으로 실행 어라운드 패턴을 적용할 수 있는지 코드를 통해서 살펴보자

public String processFile() throws IOException {
    try (BufferedReader br = new BufferedReader(new FileReader("data.txt"))){
        return br.readLine();
    }
}

BufferedReader를 통해서 파일의 한 줄을 읽는 코드이다. 위 코드를 차례대로 변화시켜가며 알아보자.

지금은 고작 한 줄 읽고 끝내는데, 한 번에 10줄을 읽어야한다면?

1) 파일에 접근하는 로직 -> '있음'
2) 값을 읽어오기 위한 Reader를 얻는 로직 -> '있음'
3) 10줄을 읽어오는 로직 -> '있음'

우리는, BufferedReader를 통해 10줄을 읽도록 만들기 위해, processFile() 메서드에게 동작을 전달해주도록 수종할 것이다. 
동작을 전달해주는 것 , 즉 '동작 파라미터화'를 이용하자는 것이다.

//우리는 이렇게 동작할 수 있도록 만들고 싶다.

String result = processFile(BufferedReader br ->{
   StringBuilder fileMessage = new StringBuilder();
   for(int i = 0; i < 10; i++){
       fileMessage.append(br.readLine());
   }
   return fileMessage.toString();
})

우리는 람다를 활용하여 다음과 같이 10줄을 받아서 처리하도록 만들었다. 처음부터 람다 표현식을 만들었다기 보단,
10줄을 처리하는 동작 자체를 파라미터로 넘겼다고 보는 것이 더 쉽다. processFile()의 인자로
10줄을 읽는 동작 자체를 전달해준 것이다. 이렇게 만든 동작 자체를 파라미터화 시켰다면, 이제 이를 바탕으로 함수형 인터페이스를 하나 선언해보자.

@FuntionalInterface
public interface BufferedReaderProcessor {
    String process(BufferedReadr b) throws IOException;
}

람다 표현식의 시그니처와 추상메서드의 시그니처는 동일하기 때문에, 파리미터로 BufferedReader를 선언해준다.
메서드명은 익명함수이기 때문에 별도로 고려하지 않아도 된다. 이제, 이러한 process()메서드의 시그니처와 동일한 람다를 전달해보자.

public String processFile(BufferedReaderProcessor p) throws IOException {
    try(BufferedReader br = 
    new BufferedReader(new FileReader("data.txt"))){
        return p.process(br); // 이렇게 처리할 수 있게 되었다.
    }
}



// 원본블로그 : https://cl8d.tistory.com/m/36  